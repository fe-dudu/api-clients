/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/token/v1/discovery/evm/{address}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GET TokenDiscovery/Get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/token/v1/evm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['POST TokensListing/GetTokenIcons'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/token/v1/evm/{chainId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GET TokensListing/GetTokens'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/token/v1/evm/abi/{chainId}/{contractAddress}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GET Contract/Get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ContractResponse: {
      abi: unknown;
      address: string | null;
      chainId: string | null;
      implementationContractAddress: string | null;
      isProxied: boolean;
    };
    GetTokenIconRequest: {
      chainId: string | null;
      contractAddresses: string[] | null;
    };
    IconToken: {
      chainId: string | null;
      contractAddress: string | null;
      /** Format: int32 */
      digits: number;
      iconUrl: string | null;
      symbol: string | null;
    };
    TokenResponse: {
      chainId: string | null;
      contractAddress: string | null;
      /** Format: int32 */
      digits: number | null;
      display: string | null;
      iconUrl: string | null;
      symbol: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  'GET TokenDiscovery/Get': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TokenResponse'][];
          'text/json': components['schemas']['TokenResponse'][];
          'text/plain': components['schemas']['TokenResponse'][];
        };
      };
    };
  };
  'POST TokensListing/GetTokenIcons': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/*+json': components['schemas']['GetTokenIconRequest'];
        'application/json': components['schemas']['GetTokenIconRequest'];
        'text/json': components['schemas']['GetTokenIconRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IconToken'][];
          'text/json': components['schemas']['IconToken'][];
          'text/plain': components['schemas']['IconToken'][];
        };
      };
    };
  };
  'GET TokensListing/GetTokens': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        chainId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TokenResponse'][];
          'text/json': components['schemas']['TokenResponse'][];
          'text/plain': components['schemas']['TokenResponse'][];
        };
      };
    };
  };
  'GET Contract/Get': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        chainId: string;
        contractAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ContractResponse'];
          'text/json': components['schemas']['ContractResponse'];
          'text/plain': components['schemas']['ContractResponse'];
        };
      };
    };
  };
}
